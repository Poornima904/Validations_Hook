sap.ui.define(["sap/ui/core/mvc/ControllerExtension"],function(e){"use strict";return e.extend("validation1.ext.controller.HideListpg",{override:{onInit:function(){var e=this.base.getExtensionAPI().getModel()},routing:{onBeforeBinding:function(){debugger;MessageToast.show("ON before binding TRIGGERED PP")},onAfterBinding:function(){debugger;MessageToast.show("ON after binding TRIGGERED PP")}},editFlow:{onBeforeDelete:function(){debugger;MessageToast.show("ON BEFORE delete TRIGGERED PP")},onAfterDelete:function(){debugger;MessageToast.show("ON after delete TRIGGERED PP")},onBeforeCreate:function(){debugger;MessageToast.show("ON BEFORE create TRIGGERED PP")},onAfterCreate:function(){debugger;MessageToast.show("ON after create TRIGGERED PP")},onBeforeSave:function(e){debugger;MessageToast.show("ON BEFORE SAVE TRIGGERED PP")},onAfterSave:function(e){debugger;MessageToast.show("ON AFTER SAVE TRIGGERED PP")},onBeforeEdit:function(){debugger;MessageToast.show("ON BEFORE EDIT TRIGGERED PP")},onAfterEdit:function(){debugger;MessageToast.show("ON AFTER EDIT TRIGGERED PP")},onBeforeDiscard:function(){debugger;MessageToast.show("ON BEFORE discard TRIGGERED PP")},onAfterDiscard:function(){debugger;MessageToast.show("ON after discard TRIGGERED PP")}}}})});